package br.rnp.redesegura.controllers.api;

import br.rnp.redesegura.controllers.routes.Routes;
import br.rnp.redesegura.dto.ServiceCheckDto;
import br.rnp.redesegura.dto.response.VulnerabilityTestResponse;
import br.rnp.redesegura.models.Vulnerability;
import br.rnp.redesegura.services.VulnerabilityService;
import br.rnp.redesegura.services.VulnerabilityTestService;
import io.swagger.annotations.ApiOperation;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping(Routes.VULNERABILITY_TEST)
public class VulnerabilityTestController {

    @Autowired
    private VulnerabilityTestService vulnerabilityTestService;

    @GetMapping("/{vulnerabilityId}")
    @ApiOperation(value = "Testar vulnerabilidade por ID", notes = "Executa um teste em uma vulnerabilidade específica pelo ID.")
    public ResponseEntity<VulnerabilityTestResponse> testVulnerability(@PathVariable("vulnerabilityId") Long vulnerabilityId) {
        return ResponseEntity.ok(vulnerabilityTestService.testVulnerability(vulnerabilityId));
    }

    @PostMapping("/ntp")
    @ApiOperation(value = "Testar vulnerabilidade NTP", notes = "Executa um teste de amplificação DDOS em servidores NTP.")
    public ResponseEntity<VulnerabilityTestResponse> testNtp(@RequestBody @Valid ServiceCheckDto serviceCheckDto) {
        return ResponseEntity.ok(vulnerabilityTestService.testVulnerability(serviceCheckDto, Vulnerability.VulnerabilityTypeEnum.NTP_DDOS_AMPLIFICATION));
    }

    @PostMapping("/dns")
    @ApiOperation(value = "Testar vulnerabilidade DNS", notes = "Executa um teste de recursão DNS.")
    public ResponseEntity<VulnerabilityTestResponse> testDns(@RequestBody @Valid ServiceCheckDto serviceCheckDto) {
        return ResponseEntity.ok(vulnerabilityTestService.testVulnerability(serviceCheckDto, Vulnerability.VulnerabilityTypeEnum.DNS_RECURSION));
    }

    @PostMapping("/netbios")
    @ApiOperation(value = "Testar vulnerabilidade NetBIOS", notes = "Executa um teste de exposição do NetBIOS.")
    public ResponseEntity<VulnerabilityTestResponse> testNetbios(@RequestBody @Valid ServiceCheckDto serviceCheckDto) {
        return ResponseEntity.ok(vulnerabilityTestService.testVulnerability(serviceCheckDto, Vulnerability.VulnerabilityTypeEnum.NETBIOS_EXPOSURE));
    }

    @PostMapping("/snmp")
    @ApiOperation(value = "Testar vulnerabilidade SNMP", notes = "Executa um teste de exposição de comunidades públicas SNMP.")
    public ResponseEntity<VulnerabilityTestResponse> testSnmp(@RequestBody @Valid ServiceCheckDto serviceCheckDto) {
        return ResponseEntity.ok(vulnerabilityTestService.testVulnerability(serviceCheckDto, Vulnerability.VulnerabilityTypeEnum.SNMP_PUBLIC_COMMUNITY));
    }

    @PostMapping("/samba")
    @ApiOperation(value = "Testar vulnerabilidade Samba", notes = "Executa um teste em versões desatualizadas do Samba.")
    public ResponseEntity<VulnerabilityTestResponse> testSamba(@RequestBody @Valid ServiceCheckDto serviceCheckDto) {
        return ResponseEntity.ok(vulnerabilityTestService.testVulnerability(serviceCheckDto, Vulnerability.VulnerabilityTypeEnum.SAMBA_OUTDATED_VERSION));
    }

    @PostMapping("/mysql")
    @ApiOperation(value = "Testar vulnerabilidade MySQL", notes = "Executa um teste de exposição de serviço MySQL.")
    public ResponseEntity<VulnerabilityTestResponse> testMysql(@RequestBody @Valid ServiceCheckDto serviceCheckDto) {
        return ResponseEntity.ok(vulnerabilityTestService.testVulnerability(serviceCheckDto, Vulnerability.VulnerabilityTypeEnum.EXPOSED_MYSQL));
    }

    @PostMapping("/redis")
    @ApiOperation(value = "Testar vulnerabilidade Redis", notes = "Executa um teste de exposição de serviço Redis sem autenticação.")
    public ResponseEntity<VulnerabilityTestResponse> testRedis(@RequestBody @Valid ServiceCheckDto serviceCheckDto) {
        return ResponseEntity.ok(vulnerabilityTestService.testVulnerability(serviceCheckDto, Vulnerability.VulnerabilityTypeEnum.REDIS_NO_AUTHENTICATION));
    }

    @PostMapping("/ssdp")
    @ApiOperation(value = "Testar vulnerabilidade SSDP", notes = "Executa um teste de exposição do serviço SSDP.")
    public ResponseEntity<VulnerabilityTestResponse> testSsdp(@RequestBody @Valid ServiceCheckDto serviceCheckDto) {
        return ResponseEntity.ok(vulnerabilityTestService.testVulnerability(serviceCheckDto, Vulnerability.VulnerabilityTypeEnum.EXPOSED_SSDP));
    }

    @PostMapping("/memcached")
    @ApiOperation(value = "Testar vulnerabilidade Memcached", notes = "Executa um teste de exposição do serviço Memcached.")
    public ResponseEntity<VulnerabilityTestResponse> testMemcached(@RequestBody @Valid ServiceCheckDto serviceCheckDto) {
        return ResponseEntity.ok(vulnerabilityTestService.testVulnerability(serviceCheckDto, Vulnerability.VulnerabilityTypeEnum.EXPOSED_MEMCACHED));
    }

    @PostMapping("/slp")
    @ApiOperation(value = "Testar vulnerabilidade SLP", notes = "Executa um teste de exposição do serviço SLP.")
    public ResponseEntity<VulnerabilityTestResponse> testSlp(@RequestBody @Valid ServiceCheckDto serviceCheckDto) {
        return ResponseEntity.ok(vulnerabilityTestService.testVulnerability(serviceCheckDto, Vulnerability.VulnerabilityTypeEnum.EXPOSED_SLP));
    }


}
