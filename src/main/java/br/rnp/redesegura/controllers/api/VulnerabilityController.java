package br.rnp.redesegura.controllers.api;

import br.rnp.redesegura.controllers.routes.Routes;
import br.rnp.redesegura.dto.VulnerabilityDto;
import br.rnp.redesegura.dto.response.VulnerabilityResponse;
import br.rnp.redesegura.services.VulnerabilityService;
import io.swagger.annotations.ApiOperation;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping(Routes.VULNERABILITIES)
public class VulnerabilityController {

    @Autowired
    private VulnerabilityService vulnerabilityService;

    @GetMapping
    @ApiOperation(value = "Obter todas as vulnerabilidades", notes = "Retorna uma lista de todas as vulnerabilidades registradas.")
    public ResponseEntity<List<VulnerabilityResponse>> getAll() {
        return ResponseEntity.ok(vulnerabilityService.findAll());
    }

    @GetMapping("/{id}")
    @ApiOperation(value = "Obter vulnerabilidade por ID", notes = "Retorna os detalhes de uma vulnerabilidade específica pelo ID.")
    public ResponseEntity<VulnerabilityResponse> getById(@PathVariable("id") Long id) {
        return ResponseEntity.ok(vulnerabilityService.findById(id));
    }

    @PostMapping
    @ApiOperation(value = "Criar nova vulnerabilidade", notes = "Cria uma nova vulnerabilidade com os dados fornecidos.")
    public ResponseEntity<VulnerabilityResponse> create(@RequestBody @Valid VulnerabilityDto vulnerabilityDto) {
        return ResponseEntity.status(HttpStatus.CREATED).body(vulnerabilityService.create(vulnerabilityDto));
    }

    @PutMapping("/{id}")
    @ApiOperation(value = "Atualizar vulnerabilidade por ID", notes = "Atualiza os detalhes de uma vulnerabilidade específica pelo ID.")
    public ResponseEntity<VulnerabilityResponse> update(@PathVariable("id") Long id, @RequestBody @Valid VulnerabilityDto vulnerabilityDto) {
        return ResponseEntity.ok(vulnerabilityService.update(id, vulnerabilityDto));
    }

    @DeleteMapping("/{id}")
    @ApiOperation(value = "Deletar vulnerabilidade por ID", notes = "Remove uma vulnerabilidade específica pelo ID.")
    public ResponseEntity<Void> delete(@PathVariable("id") Long id) {
        vulnerabilityService.delete(id);
        return ResponseEntity.noContent().build();
    }
}
