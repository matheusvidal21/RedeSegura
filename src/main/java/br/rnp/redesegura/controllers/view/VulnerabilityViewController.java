package br.rnp.redesegura.controllers.view;

import br.rnp.redesegura.controllers.routes.Routes;
import br.rnp.redesegura.dto.VulnerabilityDto;
import br.rnp.redesegura.dto.response.VulnerabilityResponse;
import br.rnp.redesegura.models.enums.Severity;
import br.rnp.redesegura.models.enums.VulnerabilityStatus;
import br.rnp.redesegura.services.ServiceEntityService;
import br.rnp.redesegura.services.VulnerabilityService;
import br.rnp.redesegura.services.VulnerabilityTypeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

@Controller
@RequestMapping(Routes.VULNERABILITIES_VIEW)
public class VulnerabilityViewController {


    @Autowired
    private VulnerabilityService vulnerabilityService;

    @Autowired
    private ServiceEntityService serviceEntityService;

    @Autowired
    private VulnerabilityTypeService vulnerabilityTypeService;

    @GetMapping
    public String list(Model model) {
        model.addAttribute("vulnerabilities", vulnerabilityService.findAll());
        return "vulnerability/list";
    }

    @GetMapping("/{id}")
    public String detail(@PathVariable("id") Long id, Model model) {
        model.addAttribute("vulnerability", vulnerabilityService.findById(id));
        return "vulnerability/detail";
    }

    @GetMapping("/create")
    public String createForm(Model model) {
        model.addAttribute("vulnerabilityDto", new VulnerabilityDto());
        model.addAttribute("services", serviceEntityService.findAll());
        model.addAttribute("vulnerabilityTypes", vulnerabilityTypeService.findAll());
        return "vulnerability/create";
    }

    @PostMapping("/create")
    public String create(@ModelAttribute("vulnerabilityDto") VulnerabilityDto vulnerabilityDto) {
        vulnerabilityService.create(vulnerabilityDto);
        return "redirect:/vulnerabilities";
    }

    @GetMapping("/edit/{id}")
    public String editForm(@PathVariable("id") Long id, Model model) {
        VulnerabilityResponse vulnerabilityResponse = vulnerabilityService.findById(id);
        VulnerabilityDto vulnerabilityDto = VulnerabilityDto.builder()
                .id(vulnerabilityResponse.getId())
                .title(vulnerabilityResponse.getTitle())
                .severity(Severity.fromValue(vulnerabilityResponse.getSeverity()).name())
                .status(VulnerabilityStatus.fromValue(vulnerabilityResponse.getStatus()).name())
                .serviceId(vulnerabilityResponse.getServiceId())
                .vulnerabilityTypeId(vulnerabilityResponse.getVulnerabilityTypeId())
                .build();

        model.addAttribute("vulnerabilityDto", vulnerabilityDto);
        model.addAttribute("services", serviceEntityService.findAll());
        model.addAttribute("vulnerabilityTypes", vulnerabilityTypeService.findAll());
        return "vulnerability/edit";
    }

    @PostMapping("/edit/{id}")
    public String edit(@PathVariable("id") Long id, @ModelAttribute("vulnerabilityDto") VulnerabilityDto vulnerabilityDto) {
        vulnerabilityService.update(id, vulnerabilityDto);
        return "redirect:/vulnerabilities";
    }

    @PostMapping("/delete/{id}")
    public String delete(@PathVariable("id") Long id) {
        vulnerabilityService.delete(id);
        return "redirect:/vulnerabilities";
    }
}
