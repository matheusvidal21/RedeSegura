package br.rnp.redesegura.controllers.view;

import br.rnp.redesegura.controllers.routes.Routes;
import br.rnp.redesegura.dtos.ServiceCheckDto;
import br.rnp.redesegura.dtos.response.VulnerabilityTestResponse;
import br.rnp.redesegura.models.Vulnerability;
import br.rnp.redesegura.services.VulnerabilityService;
import br.rnp.redesegura.services.VulnerabilityTestService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.net.MalformedURLException;
import java.nio.file.Path;
import java.nio.file.Paths;

@Controller
@RequestMapping(Routes.VULNERABILITY_TEST_VIEW)
public class VulnerabilityTestViewController {

    @Autowired
    private VulnerabilityTestService vulnerabilityTestService;

    @Autowired
    private VulnerabilityService vulnerabilityService;

    @Value("${report.directory}")
    private String reportDirectory;

    @GetMapping
    public String showTestForm(Model model) {
        model.addAttribute("serviceCheckDto", new ServiceCheckDto());
        model.addAttribute("vulnerabilityTypes", Vulnerability.VulnerabilityTypeEnum.values());
        model.addAttribute("vulnerabilities", vulnerabilityService.findAll());
        return "vulnerability/test";
    }

    @PostMapping("/test")
    public String testVulnerability(@ModelAttribute("serviceCheckDto") ServiceCheckDto serviceCheckDto,
                                    @RequestParam("vulnerabilityType") Vulnerability.VulnerabilityTypeEnum vulnerabilityType,
                                    Model model) {
        VulnerabilityTestResponse response = vulnerabilityTestService.testVulnerability(serviceCheckDto, vulnerabilityType);
        model.addAttribute("response", response);
        return "vulnerability/result";
    }

    @PostMapping("/test-existing")
    public String testExistingVulnerability(@RequestParam("vulnerabilityId") Long vulnerabilityId, Model model) {
        VulnerabilityTestResponse response = vulnerabilityTestService.testVulnerability(vulnerabilityId);
        model.addAttribute("response", response);
        return "vulnerability/result";
    }

    @GetMapping("/download-pdf/{fileName}")
    public ResponseEntity<Resource> downloadPdf(@PathVariable("fileName") String fileName) {
        try {
            Path filePath = Paths.get(reportDirectory + fileName);
            Resource resource = new UrlResource(filePath.toUri());

            if (resource.exists() || resource.isReadable()) {
                return ResponseEntity.ok()
                        .contentType(MediaType.APPLICATION_PDF)
                        .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
                        .body(resource);
            } else {
                throw new RuntimeException("Could not read the file!");
            }
        } catch (MalformedURLException e) {
            throw new RuntimeException("Error: " + e.getMessage());
        }
    }

}