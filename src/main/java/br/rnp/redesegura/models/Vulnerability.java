package br.rnp.redesegura.models;

import br.rnp.redesegura.models.enums.Severity;
import br.rnp.redesegura.models.enums.VulnerabilityStatus;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Entity
@Table(name = "vulnerabilities")
public class Vulnerability {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;

    @Enumerated(EnumType.STRING)
    private Severity severity;

    @Enumerated(EnumType.STRING)
    private VulnerabilityStatus status;

    @ManyToOne
    @JoinColumn(name = "type_id", nullable = false)
    private VulnerabilityType type;

    @ManyToOne
    @JoinColumn(name = "service_id")
    private Service service;

    @ManyToOne
    @JoinColumn(name = "server_id")
    private Server server;

    @CreationTimestamp
    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "resolved_at")
    private LocalDateTime resolvedAt;

    public enum VulnerabilityTypeEnum {
        DNS_RECURSION("DNS Recursion"),
        NTP_DDOS_AMPLIFICATION("NTP DDOS Amplification"),
        NETBIOS_EXPOSURE("NetBIOS Exposure"),
        SNMP_PUBLIC_COMMUNITY("SNMP Public Community"),
        SAMBA_OUTDATED_VERSION("Samba Outdated Version"),
        EXPOSED_MYSQL("Exposed MySQL"),
        REDIS_NO_AUTHENTICATION("Redis No Authentication"),
        EXPOSED_SSDP("Exposed SSDP"),
        EXPOSED_MEMCACHED("Exposed Memcached"),
        EXPOSED_SLP("Exposed SLP");

        private final String typeName;

        VulnerabilityTypeEnum(String typeName) {
            this.typeName = typeName;
        }

        public String getTypeName() {
            return typeName;
        }

        public static VulnerabilityTypeEnum fromName(String name) {
            for (VulnerabilityTypeEnum type : values()) {
                if (type.getTypeName().equalsIgnoreCase(name)) {
                    return type;
                }
            }
            throw new IllegalArgumentException("Invalid vulnerability type: " + name);
        }
    }

}
