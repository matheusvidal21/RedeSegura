package br.rnp.redesegura.services.impl;

import br.rnp.redesegura.dto.VulnerabilityDto;
import br.rnp.redesegura.dto.response.VulnerabilityResponse;
import br.rnp.redesegura.exception.NotFoundException;
import br.rnp.redesegura.mapper.VulnerabilityMapper;
import br.rnp.redesegura.models.Service;
import br.rnp.redesegura.models.System;
import br.rnp.redesegura.models.Vulnerability;
import br.rnp.redesegura.models.VulnerabilityType;
import br.rnp.redesegura.models.enums.VulnerabilityStatus;
import br.rnp.redesegura.repositories.ServiceRepository;
import br.rnp.redesegura.repositories.SystemRepository;
import br.rnp.redesegura.repositories.VulnerabilityRepository;
import br.rnp.redesegura.repositories.VulnerabilityTypeRepository;
import br.rnp.redesegura.services.VulnerabilityService;
import org.springframework.beans.factory.annotation.Autowired;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@org.springframework.stereotype.Service
public class VulnerabilityServiceImpl implements VulnerabilityService {

    @Autowired
    private VulnerabilityRepository vulnerabilityRepository;

    @Autowired
    private SystemRepository systemRepository;

    @Autowired
    private ServiceRepository serviceRepository;

    @Autowired
    private VulnerabilityTypeRepository vulnerabilityTypeRepository;

    @Override
    public List<VulnerabilityResponse> findAll() {
        return vulnerabilityRepository.findAll().stream()
                .map(VulnerabilityMapper::toResponse)
                .collect(Collectors.toList());
    }

    @Override
    public VulnerabilityResponse findById(Long id) {
        Vulnerability vulnerability = vulnerabilityRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("Vulnerability not found"));
        return VulnerabilityMapper.toResponse(vulnerability);
    }

    @Override
    public VulnerabilityResponse create(VulnerabilityDto vulnerabilityDto) {
        Service service = serviceRepository.findById(vulnerabilityDto.getServiceId())
                .orElseThrow(() -> new NotFoundException("Service not found"));

        System system = systemRepository.findById(service.getSystem().getId())
                .orElseThrow(() -> new NotFoundException("System not found"));

        VulnerabilityType vulnerabilityType = vulnerabilityTypeRepository.findById(vulnerabilityDto.getVulnerabilityTypeId())
                .orElseThrow(() -> new NotFoundException("Vulnerability Type not found"));

        Vulnerability vulnerability = VulnerabilityMapper.toEntity(vulnerabilityDto, system, service, vulnerabilityType);
        if (VulnerabilityStatus.fromValue(vulnerabilityDto.getStatus()) == VulnerabilityStatus.RESOLVED) {
            vulnerability.setResolvedAt(LocalDateTime.now());
        } else {
            vulnerability.setResolvedAt(null);
        }
        return VulnerabilityMapper.toResponse(vulnerabilityRepository.save(vulnerability));
    }

    @Override
    public VulnerabilityResponse update(Long id, VulnerabilityDto vulnerabilityDto) {
        Service service = serviceRepository.findById(vulnerabilityDto.getServiceId())
                .orElseThrow(() -> new NotFoundException("Service not found"));

        Vulnerability existingVulnerability = vulnerabilityRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("Vulnerability not found"));

        System system = systemRepository.findById(service.getSystem().getId())
                .orElseThrow(() -> new NotFoundException("System not found"));

        VulnerabilityType vulnerabilityType = vulnerabilityTypeRepository.findById(vulnerabilityDto.getVulnerabilityTypeId())
                .orElseThrow(() -> new NotFoundException("Vulnerability Type not found"));

        Vulnerability updatedVulnerability = VulnerabilityMapper.toEntity(vulnerabilityDto, system, service, vulnerabilityType);

        if (VulnerabilityStatus.fromValue(vulnerabilityDto.getStatus()) == VulnerabilityStatus.RESOLVED) {
            updatedVulnerability.setResolvedAt(LocalDateTime.now());
        } else {
            updatedVulnerability.setResolvedAt(null);
        }

        updatedVulnerability.setId(existingVulnerability.getId());

        return VulnerabilityMapper.toResponse(vulnerabilityRepository.save(updatedVulnerability));
    }

    @Override
    public void delete(Long id) {
        var vulnerability = vulnerabilityRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("Vulnerability not found"));
        vulnerabilityRepository.deleteById(id);
    }

}
