package br.rnp.redesegura.services.impl;

import br.rnp.redesegura.dto.ServiceCheckDto;
import br.rnp.redesegura.dto.response.VulnerabilityTestResponse;
import br.rnp.redesegura.exception.NotFoundException;
import br.rnp.redesegura.factory.VulnerabilityTestFactory;
import br.rnp.redesegura.models.Service;
import br.rnp.redesegura.models.Vulnerability;
import br.rnp.redesegura.models.enums.ServiceStatus;
import br.rnp.redesegura.models.enums.TestStatus;
import br.rnp.redesegura.models.enums.VulnerabilityStatus;
import br.rnp.redesegura.repositories.ServiceRepository;
import br.rnp.redesegura.repositories.VulnerabilityRepository;
import br.rnp.redesegura.services.VulnerabilityTestService;
import br.rnp.redesegura.strategy.VulnerabilityTestStrategy;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.HashSet;

@org.springframework.stereotype.Service
public class VulnerabilityTestServiceImpl implements VulnerabilityTestService {

    @Autowired
    private VulnerabilityRepository vulnerabilityRepository;

    @Autowired
    private ServiceRepository serviceRepository;


    @Override
    public VulnerabilityTestResponse testVulnerability(Long vulnerabilityId) {
        Vulnerability vulnerability = vulnerabilityRepository.findById(vulnerabilityId).orElseThrow(() -> new NotFoundException("Vulnerability not found"));
        Service service = serviceRepository.findById(vulnerability.getService().getId()).orElseThrow(() -> new NotFoundException("Service not found"));

        VulnerabilityTestStrategy strategy = VulnerabilityTestFactory.getStrategy(Vulnerability.VulnerabilityTypeEnum.fromName(vulnerability.getType().getName()));

        VulnerabilityTestResponse response = strategy.test(vulnerability);

        if (response.getTestStatus().equals(TestStatus.NOT_VULNERABLE)) {
            vulnerability.setStatus(VulnerabilityStatus.RESOLVED);
            service.setStatus(ServiceStatus.HEALTHY);
        } else {
            vulnerability.setStatus(VulnerabilityStatus.NOT_RESOLVED);
            service.setStatus(ServiceStatus.DEGRADED);
        }

        vulnerabilityRepository.save(vulnerability);
        serviceRepository.save(service);

        return response;
    }

    @Override
    public VulnerabilityTestResponse testVulnerability(ServiceCheckDto serviceCheckDto, Vulnerability.VulnerabilityTypeEnum vulnerabilityType) {
        var service = Service.builder()
                .ip(serviceCheckDto.getIp())
                .port(serviceCheckDto.getPort())
                .build();
        var vulnerability = Vulnerability.builder()
                .service(service)
                .build();

        VulnerabilityTestStrategy strategy = VulnerabilityTestFactory.getStrategy(vulnerabilityType);
        return strategy.test(vulnerability);
    }
}
